Baubles$Bauble.Alert <-  rep("alert(this.getAttribute(\"Happy New Year\"))", length(Baubles))
length(Baubles)
length(Baubles)
length(Baubles[0])
nrow(Baubles)
Baubles$Bauble.Alert <-  rep("alert(this.getAttribute(\"Happy New Year\"))", nrow(Baubles))
Baubles <- data.frame(Bauble.X = c(6, 9, 15, 17, 5, 13, 16, 7, 10, 14, 7, 9, 11,
14, 8, 14, 9, 12, 11, 12, 14, 11, 17, 10))
Baubles$Bauble.Y <- c(4, 5, 4, 4, 5, 5, 5, 6, 6, 6, 8, 8, 8, 8, 10,
10, 11, 11, 12, 13, 10, 16, 7, 14)
Baubles$Bauble.Colour <- factor(c(1, 2, 2, 3, 2, 3, 1, 3, 1, 1, 1, 2, 1, 2,
3, 3, 2, 1, 3, 2, 1, 3, 3, 1))
Baubles$Bauble.Size <- c(1, 3, 1, 1, 2, 1, 2, 2, 2, 1, 1, 1, 3, 3, 3,
2, 3, 1, 1, 2, 2, 3, 3, 2)
Baubles$Bauble.Text <- rep("Merry Christmas",nrow(Baubles))
Baubles$Bauble.Alert <-  rep("alert(this.getAttribute(\"Happy New Year\"))", nrow(Baubles))
tree <- ggplot() +
geom_tile(data = ChristmasTree, aes(x = X, y = Y, fill = Colour)) +
geom_point_interactive(data = Baubles,
aes(x = Bauble.X, y = Bauble.Y,colour = Bauble.Colour, size = Bauble.Size,onclick = Bauble.Text)
) +
scale_colour_manual(values = c("firebrick2", "gold", "dodgerblue3")) +
scale_fill_identity() +
theme_bw() +
scale_x_continuous(breaks = NULL) +
scale_y_continuous(breaks = NULL) +
labs(x = "", y = "") +
guides(colour=FALSE,size=FALSE)
tree
ggiraph(code = {print(tree)})
tree <- ggplot() +
geom_tile(data = ChristmasTree, aes(x = X, y = Y, fill = Colour)) +
geom_point_interactive(data = Baubles,
aes(x = Bauble.X, y = Bauble.Y,colour = Bauble.Colour, size = Bauble.Size,onclick = Bauble.Alert, tooltip = Bauble.Text)
) +
scale_colour_manual(values = c("firebrick2", "gold", "dodgerblue3")) +
scale_fill_identity() +
theme_bw() +
scale_x_continuous(breaks = NULL) +
scale_y_continuous(breaks = NULL) +
labs(x = "", y = "") +
guides(colour=FALSE,size=FALSE)
ggiraph(code = {print(tree)})
tree <- ggplot() +
geom_tile_interactive(data = ChristmasTree, aes(x = X, y = Y, fill = Colour)) +
geom_point_interactive(data = Baubles,
aes(x = Bauble.X, y = Bauble.Y,colour = Bauble.Colour, size = Bauble.Size,onclick = Bauble.Alert, tooltip = Bauble.Text)
) +
scale_colour_manual(values = c("firebrick2", "gold", "dodgerblue3")) +
scale_fill_identity() +
theme_bw() +
scale_x_continuous(breaks = NULL) +
scale_y_continuous(breaks = NULL) +
labs(x = "", y = "") +
guides(colour=FALSE,size=FALSE)
tree
ggiraph(code = {print(tree)})
library(ggiraph)
library(ggplot2)
ChristmasTree <- read.csv("https://raw.githubusercontent.com/t-redactyl/Blog-posts/master/Christmas%20tree%20base%20data.csv")
ChristmasTree <- ChristmasTree[1:148,]
colnames(ChristmasTree) <- c("X","Y","Colour")
Baubles <- data.frame(Bauble.X = c(6, 9, 15, 17, 5, 13, 16, 7, 10, 14, 7, 9, 11,
14, 8, 14, 9, 12, 11, 12, 14, 11, 17, 10))
Baubles$Bauble.Y <- c(4, 5, 4, 4, 5, 5, 5, 6, 6, 6, 8, 8, 8, 8, 10,
10, 11, 11, 12, 13, 10, 16, 7, 14)
Baubles$Bauble.Colour <- factor(c(1, 2, 2, 3, 2, 3, 1, 3, 1, 1, 1, 2, 1, 2,
3, 3, 2, 1, 3, 2, 1, 3, 3, 1))
Baubles$Bauble.Size <- c(1, 3, 1, 1, 2, 1, 2, 2, 2, 1, 1, 1, 3, 3, 3,
2, 3, 1, 1, 2, 2, 3, 3, 2)
Baubles$Bauble.Text <- rep("Merry Christmas",nrow(Baubles))
Baubles$Bauble.Alert <-  rep("alert(this.getAttribute(\"Happy New Year\"))", nrow(Baubles))
tree <- ggplot() +
geom_tile_interactive(data = ChristmasTree, aes(x = X, y = Y, fill = Colour)) +
geom_point_interactive(data = Baubles,
aes(x = Bauble.X, y = Bauble.Y,colour = Bauble.Colour, size = Bauble.Size,onclick = Bauble.Alert, tooltip = Bauble.Text)
) +
scale_colour_manual(values = c("firebrick2", "gold", "dodgerblue3")) +
scale_fill_identity() +
theme_bw() +
scale_x_continuous(breaks = NULL) +
scale_y_continuous(breaks = NULL) +
labs(x = "", y = "") +
guides(colour=FALSE,size=FALSE)
tree
ggiraph(code = {print(tree)})
library(ggiraph)
library(ggplot2)
ChristmasTree <- read.csv("https://raw.githubusercontent.com/t-redactyl/Blog-posts/master/Christmas%20tree%20base%20data.csv")
ChristmasTree <- ChristmasTree[1:148,]
colnames(ChristmasTree) <- c("X","Y","Colour")
Baubles <- data.frame(Bauble.X = c(6, 9, 15, 17, 5, 13, 16, 7, 10, 14, 7, 9, 11,
14, 8, 14, 9, 12, 11, 12, 14, 11, 17, 10))
Baubles$Bauble.Y <- c(4, 5, 4, 4, 5, 5, 5, 6, 6, 6, 8, 8, 8, 8, 10,
10, 11, 11, 12, 13, 10, 16, 7, 14)
Baubles$Bauble.Colour <- factor(c(1, 2, 2, 3, 2, 3, 1, 3, 1, 1, 1, 2, 1, 2,
3, 3, 2, 1, 3, 2, 1, 3, 3, 1))
Baubles$Bauble.Size <- c(1, 3, 1, 1, 2, 1, 2, 2, 2, 1, 1, 1, 3, 3, 3,
2, 3, 1, 1, 2, 2, 3, 3, 2)
Baubles$Bauble.Text <- rep("Merry Christmas",nrow(Baubles))
Baubles$Bauble.Alert <-  rep("alert(this.getAttribute(\"Happy New Year\"))", nrow(Baubles))
tree <- ggplot() +
geom_tile_interactive(data = ChristmasTree, aes(x = X, y = Y, fill = Colour)) +
geom_point_interactive(data = Baubles,
aes(x = Bauble.X, y = Bauble.Y,colour = Bauble.Colour, size = Bauble.Size,onclick = Bauble.Alert, tooltip = Bauble.Text)
) +
scale_colour_manual(values = c("firebrick2", "gold", "dodgerblue3")) +
scale_fill_identity() +
theme_bw() +
scale_x_continuous(breaks = NULL) +
scale_y_continuous(breaks = NULL) +
labs(x = "", y = "") +
guides(colour=FALSE,size=FALSE)
tree
tree <- ggplot() +
# geom_tile_interactive(data = ChristmasTree, aes(x = X, y = Y, fill = Colour)) +
# geom_point_interactive(data = Baubles,
#                        aes(x = Bauble.X, y = Bauble.Y,colour = Bauble.Colour, size = Bauble.Size,onclick = Bauble.Alert, tooltip = Bauble.Text)
#                        ) +
geom_tile(data = ChristmasTree, aes(x = X, y = Y, fill = Colour)) +
geom_point(data = Baubles,
aes(x = Bauble.X, y = Bauble.Y,colour = Bauble.Colour, size = Bauble.Size,onclick = Bauble.Alert, tooltip = Bauble.Text)
) +
scale_colour_manual(values = c("firebrick2", "gold", "dodgerblue3")) +
scale_fill_identity() +
theme_bw() +
scale_x_continuous(breaks = NULL) +
scale_y_continuous(breaks = NULL) +
labs(x = "", y = "") +
guides(colour=FALSE,size=FALSE)
library(ggiraph)
library(ggplot2)
ChristmasTree <- read.csv("https://raw.githubusercontent.com/t-redactyl/Blog-posts/master/Christmas%20tree%20base%20data.csv")
ChristmasTree <- ChristmasTree[1:148,]
colnames(ChristmasTree) <- c("X","Y","Colour")
Baubles <- data.frame(Bauble.X = c(6, 9, 15, 17, 5, 13, 16, 7, 10, 14, 7, 9, 11,
14, 8, 14, 9, 12, 11, 12, 14, 11, 17, 10))
Baubles$Bauble.Y <- c(4, 5, 4, 4, 5, 5, 5, 6, 6, 6, 8, 8, 8, 8, 10,
10, 11, 11, 12, 13, 10, 16, 7, 14)
Baubles$Bauble.Colour <- factor(c(1, 2, 2, 3, 2, 3, 1, 3, 1, 1, 1, 2, 1, 2,
3, 3, 2, 1, 3, 2, 1, 3, 3, 1))
Baubles$Bauble.Size <- c(1, 3, 1, 1, 2, 1, 2, 2, 2, 1, 1, 1, 3, 3, 3,
2, 3, 1, 1, 2, 2, 3, 3, 2)
Baubles$Bauble.Text <- rep("Merry Christmas",nrow(Baubles))
Baubles$Bauble.Alert <-  rep("alert(this.getAttribute(\"Happy New Year\"))", nrow(Baubles))
tree <- ggplot() +
# geom_tile_interactive(data = ChristmasTree, aes(x = X, y = Y, fill = Colour)) +
# geom_point_interactive(data = Baubles,
#                        aes(x = Bauble.X, y = Bauble.Y,colour = Bauble.Colour, size = Bauble.Size,onclick = Bauble.Alert, tooltip = Bauble.Text)
#                        ) +
geom_tile(data = ChristmasTree, aes(x = X, y = Y, fill = Colour)) +
geom_point(data = Baubles,
aes(x = Bauble.X, y = Bauble.Y,colour = Bauble.Colour, size = Bauble.Size,onclick = Bauble.Alert, tooltip = Bauble.Text)
) +
scale_colour_manual(values = c("firebrick2", "gold", "dodgerblue3")) +
scale_fill_identity() +
theme_bw() +
scale_x_continuous(breaks = NULL) +
scale_y_continuous(breaks = NULL) +
labs(x = "", y = "") +
guides(colour=FALSE,size=FALSE)
tree
dataset = data.frame( x1 = c(1, 3, 1, 5, 4),
x2 = c(2, 4, 3, 6, 6),
y1 = c( 1, 1, 4, 1, 3),
y2 = c( 2, 2, 5, 3, 5),
t = c( 'a', 'a', 'a', 'b', 'b'),
r = c( 1, 2, 3, 4, 5),
tooltip = c("ID 1", "ID 2", "ID 3", "ID 4", "ID 5"),
uid = c("ID 1", "ID 2", "ID 3", "ID 4", "ID 5"),
oc = rep("alert(this.getAttribute(\"data-id\"))", 5)
)
gg_rect = ggplot() +
scale_x_continuous(name="x") +
scale_y_continuous(name="y") +
geom_rect_interactive(data=dataset,
mapping = aes(xmin = x1, xmax = x2,
ymin = y1, ymax = y2, fill = t,
tooltip = tooltip, onclick = oc, data_id = uid ),
color="black", alpha=0.5) +
geom_text(data=dataset,
aes(x = x1 + ( x2 - x1 ) / 2, y = y1 + ( y2 - y1 ) / 2,
label = r ),
size = 4 )
ggiraph(code = {print(gg_rect)})
tree <- ggplot() +
# geom_tile_interactive(data = ChristmasTree, aes(x = X, y = Y, fill = Colour)) +
# geom_point_interactive(data = Baubles,
#                        aes(x = Bauble.X, y = Bauble.Y,colour = Bauble.Colour, size = Bauble.Size,onclick = Bauble.Alert, tooltip = Bauble.Text)
#                        ) +
geom_tile(data = ChristmasTree, aes(x = X, y = Y, fill = Colour)) +
geom_point(data = Baubles,
aes(x = Bauble.X, y = Bauble.Y,colour = Bauble.Colour, size = Bauble.Size,onclick = Bauble.Alert, tooltip = Bauble.Text)
) +
scale_colour_manual(values = c("firebrick2", "gold", "dodgerblue3")) +
scale_fill_identity() +
theme_bw() +
scale_x_continuous(breaks = NULL) +
scale_y_continuous(breaks = NULL) +
labs(x = "", y = "")
tree <- ggplot() +
# geom_tile_interactive(data = ChristmasTree, aes(x = X, y = Y, fill = Colour)) +
# geom_point_interactive(data = Baubles,
#                        aes(x = Bauble.X, y = Bauble.Y,colour = Bauble.Colour, size = Bauble.Size,onclick = Bauble.Alert, tooltip = Bauble.Text)
#                        ) +
geom_tile(data = ChristmasTree, aes(x = X, y = Y, fill = Colour)) +
geom_point(data = Baubles,
aes(x = Bauble.X, y = Bauble.Y,colour = Bauble.Colour, size = Bauble.Size)
) +
scale_colour_manual(values = c("firebrick2", "gold", "dodgerblue3")) +
scale_fill_identity() +
theme_bw() +
scale_x_continuous(breaks = NULL) +
scale_y_continuous(breaks = NULL) +
labs(x = "", y = "") +
guides(colour=FALSE,size=FALSE)
tree
library(ggiraph)
library(ggplot2)
ChristmasTree <- read.csv("https://raw.githubusercontent.com/t-redactyl/Blog-posts/master/Christmas%20tree%20base%20data.csv")
ChristmasTree <- ChristmasTree[1:148,]
colnames(ChristmasTree) <- c("X","Y","Colour")
Baubles <- data.frame(Bauble.X = c(6, 9, 15, 17, 5, 13, 16, 7, 10, 14, 7, 9, 11,
14, 8, 14, 9, 12, 11, 12, 14, 11, 17, 10))
Baubles$Bauble.Y <- c(4, 5, 4, 4, 5, 5, 5, 6, 6, 6, 8, 8, 8, 8, 10,
10, 11, 11, 12, 13, 10, 16, 7, 14)
Baubles$Bauble.Colour <- factor(c(1, 2, 2, 3, 2, 3, 1, 3, 1, 1, 1, 2, 1, 2,
3, 3, 2, 1, 3, 2, 1, 3, 3, 1))
Baubles$Bauble.Size <- c(1, 3, 1, 1, 2, 1, 2, 2, 2, 1, 1, 1, 3, 3, 3,
2, 3, 1, 1, 2, 2, 3, 3, 2)
Baubles$Bauble.Text <- rep("Merry Christmas",nrow(Baubles))
Baubles$Bauble.Alert <-  rep("alert(this.getAttribute(\"Happy New Year\"))", nrow(Baubles))
tree <- ggplot() +
# geom_tile_interactive(data = ChristmasTree, aes(x = X, y = Y, fill = Colour)) +
# geom_point_interactive(data = Baubles,
#                        aes(x = Bauble.X, y = Bauble.Y,colour = Bauble.Colour, size = Bauble.Size,onclick = Bauble.Alert, tooltip = Bauble.Text)
#                        ) +
geom_tile(data = ChristmasTree, aes(x = X, y = Y, fill = Colour)) +
geom_point(data = Baubles,
aes(x = Bauble.X, y = Bauble.Y,colour = Bauble.Colour, size = Bauble.Size)
) +
scale_colour_manual(values = c("firebrick2", "gold", "dodgerblue3")) +
scale_fill_identity() +
theme_bw() +
scale_x_continuous(breaks = NULL) +
scale_y_continuous(breaks = NULL) +
labs(x = "", y = "") +
guides(colour=FALSE,size=FALSE)
tree
ggiraph(code = {print(tree)})
library(ggiraph)
library(ggplot2)
ChristmasTree <- read.csv("https://raw.githubusercontent.com/t-redactyl/Blog-posts/master/Christmas%20tree%20base%20data.csv")
ChristmasTree <- ChristmasTree[1:148,]
colnames(ChristmasTree) <- c("X","Y","Colour")
Baubles <- data.frame(Bauble.X = c(6, 9, 15, 17, 5, 13, 16, 7, 10, 14, 7, 9, 11,
14, 8, 14, 9, 12, 11, 12, 14, 11, 17, 10))
Baubles$Bauble.Y <- c(4, 5, 4, 4, 5, 5, 5, 6, 6, 6, 8, 8, 8, 8, 10,
10, 11, 11, 12, 13, 10, 16, 7, 14)
Baubles$Bauble.Colour <- factor(c(1, 2, 2, 3, 2, 3, 1, 3, 1, 1, 1, 2, 1, 2,
3, 3, 2, 1, 3, 2, 1, 3, 3, 1))
Baubles$Bauble.Size <- c(1, 3, 1, 1, 2, 1, 2, 2, 2, 1, 1, 1, 3, 3, 3,
2, 3, 1, 1, 2, 2, 3, 3, 2)
Baubles$Bauble.Text <- rep("Merry Christmas",nrow(Baubles))
Baubles$Bauble.Alert <-  rep("alert(this.getAttribute(\"Happy New Year\"))", nrow(Baubles))
tree <- ggplot() +
# geom_tile_interactive(data = ChristmasTree, aes(x = X, y = Y, fill = Colour)) +
# geom_point_interactive(data = Baubles,
#                        aes(x = Bauble.X, y = Bauble.Y,colour = Bauble.Colour, size = Bauble.Size,onclick = Bauble.Alert, tooltip = Bauble.Text)
#                        ) +
geom_tile(data = ChristmasTree, aes(x = X, y = Y, fill = Colour)) +
geom_point(data = Baubles,
aes(x = Bauble.X, y = Bauble.Y,colour = Bauble.Colour, size = Bauble.Size)
) +
scale_colour_manual(values = c("firebrick2", "gold", "dodgerblue3")) +
scale_fill_identity() +
theme_bw() +
scale_x_continuous(breaks = NULL) +
scale_y_continuous(breaks = NULL) +
labs(x = "", y = "") +
guides(colour=FALSE,size=FALSE)
tree
library(ggiraph)
library(ggplot2)
ChristmasTree <- read.csv("https://raw.githubusercontent.com/t-redactyl/Blog-posts/master/Christmas%20tree%20base%20data.csv")
ChristmasTree <- ChristmasTree[1:148,]
colnames(ChristmasTree) <- c("X","Y","Colour")
Baubles <- data.frame(Bauble.X = c(6, 9, 15, 17, 5, 13, 16, 7, 10, 14, 7, 9, 11,
14, 8, 14, 9, 12, 11, 12, 14, 11, 17, 10))
Baubles$Bauble.Y <- c(4, 5, 4, 4, 5, 5, 5, 6, 6, 6, 8, 8, 8, 8, 10,
10, 11, 11, 12, 13, 10, 16, 7, 14)
Baubles$Bauble.Colour <- factor(c(1, 2, 2, 3, 2, 3, 1, 3, 1, 1, 1, 2, 1, 2,
3, 3, 2, 1, 3, 2, 1, 3, 3, 1))
Baubles$Bauble.Size <- c(1, 3, 1, 1, 2, 1, 2, 2, 2, 1, 1, 1, 3, 3, 3,
2, 3, 1, 1, 2, 2, 3, 3, 2)
Baubles$Bauble.Text <- rep("Merry Christmas",nrow(Baubles))
Baubles$Bauble.Alert <-  rep("alert(this.getAttribute(\"Happy New Year\"))", nrow(Baubles))
tree <- ggplot() +
# geom_tile_interactive(data = ChristmasTree, aes(x = X, y = Y, fill = Colour)) +
# geom_point_interactive(data = Baubles,
#                        aes(x = Bauble.X, y = Bauble.Y,colour = Bauble.Colour, size = Bauble.Size,onclick = Bauble.Alert, tooltip = Bauble.Text)
#                        ) +
geom_tile(data = ChristmasTree, aes(x = X, y = Y, fill = Colour)) +
geom_point(data = Baubles,
aes(x = Bauble.X, y = Bauble.Y,colour = Bauble.Colour, size = Bauble.Size)
) +
scale_colour_manual(values = c("firebrick2", "gold", "dodgerblue3")) +
scale_fill_identity() +
theme_bw() +
scale_x_continuous(breaks = NULL) +
scale_y_continuous(breaks = NULL) +
labs(x = "", y = "") +
guides(colour=FALSE,size=FALSE)
tree
devtools::install_github('thomasp85/gganimate')
library(gapminder)
install.packages("gapminder")
library(gapminder)
library(ggplot2)
img <- image_graph(600, 340, res = 96)
datalist <- split(gapminder, gapminder$year)
out <- lapply(datalist, function(data){
p <- ggplot(data, aes(gdpPercap, lifeExp, size = pop, color = continent)) +
scale_size("population", limits = range(gapminder$pop)) + geom_point() + ylim(20, 90) +
scale_x_log10(limits = range(gapminder$gdpPercap)) + ggtitle(data$year) + theme_classic()
print(p)
})
dev.off()
animation <- image_animate(img, fps = 2)
print(animation)
devtools::install_github('thomasp85/gganimate')
install.packages("tweenr")
install.packages("progress")
devtools::install_github('thomasp85/gganimate')
library(gganimate)
library(gganimate)
img <- image_graph(600, 340, res = 96)
datalist <- split(gapminder, gapminder$year)
out <- lapply(datalist, function(data){
p <- ggplot(data, aes(gdpPercap, lifeExp, size = pop, color = continent)) +
scale_size("population", limits = range(gapminder$pop)) + geom_point() + ylim(20, 90) +
scale_x_log10(limits = range(gapminder$gdpPercap)) + ggtitle(data$year) + theme_classic()
print(p)
})
dev.off()
animation <- image_animate(img, fps = 2)
print(animation)
library(magick)
install.packages("magick")
library(magick)
img <- image_graph(600, 340, res = 96)
datalist <- split(gapminder, gapminder$year)
out <- lapply(datalist, function(data){
p <- ggplot(data, aes(gdpPercap, lifeExp, size = pop, color = continent)) +
scale_size("population", limits = range(gapminder$pop)) + geom_point() + ylim(20, 90) +
scale_x_log10(limits = range(gapminder$gdpPercap)) + ggtitle(data$year) + theme_classic()
print(p)
})
dev.off()
animation <- image_animate(img, fps = 2)
print(animation)
getwd()
image_write(animation, "gapminder.gif")
shiny::runApp('PADwR/zadania_domowe/03/PADwR---PD3---Data-Science/apple_shiny_app')
users3 <- read.csv("C:/Users/tomas/OneDrive/Documents/Studies/PW-IAD/PADwR/zadania_domowe/03/PADwR---PD3---Data-Science/users_stacked_join_date_month.csv")
runApp('PADwR/zadania_domowe/03/PADwR---PD3---Data-Science/apple_shiny_app')
getwd()
setwd("C:/Users/tomas/OneDrive/Documents/Studies/PW-IAD/PADwR/zadania_domowe/03/PADwR---PD3---Data-Science/apple_shiny_app")
getwd()
# Załadowanie potrzebnych danych
posts <- read.csv(file="Posts.csv", header=TRUE, sep=",")
library(dplyr)
library(stringi)
library(ggplot2)
library(shiny)
options(stringsAsFactors=FALSE)
setwd("C:/Users/tomas/OneDrive/Documents/Studies/PW-IAD/PADwR/zadania_domowe/03/PADwR---PD3---Data-Science/apple_shiny_app")
# Załadowanie potrzebnych danych
posts <- read.csv(file="C:/Users/tomas/Downloads/Apple/apple.stackexchange.com/Posts.csv", header=TRUE, sep=",")
users_countries <- read.csv(file = "C:/Users/tomas/Downloads/Apple/apple.stackexchange.com/Users_countries.csv", header = TRUE, sep =",")
users_stacked_count <- read.csv(file = "C:/Users/tomas/OneDrive/Documents/Studies/PW-IAD/PADwR/zadania_domowe/03/PADwR---PD3---Data-Science/users_stacked_join_date.csv", header = TRUE, sep =",")
# Przefiltrowanie interesujacych nas danych
posts2 <- posts %>% select(Id, CreationDate, PostTypeId, AcceptedAnswerId, OwnerUserId)
users2 <- users_countries %>% select(Id, Reputation, CreationDate, Country, State)
rm(posts,users_countries)
posts3 <- inner_join(posts2,posts2, by = c("AcceptedAnswerId" = "Id")) %>%
select(CreationDate = CreationDate.x,
OwnerQuestionUserId = OwnerUserId.x,
CommentDate = CreationDate.y,
OwnerAnswerUserId = OwnerUserId.y
)
posts4 <- inner_join(posts3,users2, by = c("OwnerQuestionUserId" = "Id")) %>%
select(CreationDate = CreationDate.x,
OwnerQuestionUserId,
CommentDate,
OwnerAnswerUserId,
OwnerReputation = Reputation,
OwnerJoinDate = CreationDate.y,
OwnerCountry = Country,
OwnerState = State)
posts5 <- inner_join(posts4,users2, by = c("OwnerAnswerUserId" = "Id")) %>%
select(CreationDate = CreationDate.x,
OwnerQuestionUserId,
OwnerReputation,
OwnerJoinDate,
OwnerCountry,
OwnerState,
CommentDate,
AnswerUserId = OwnerAnswerUserId,
AnswerReputation = Reputation,
AnswerJoinDate = CreationDate.y,
AnswerCountry = Country,
AnswerState = State)
# Operacje potrzebne do wyłuskania daty
posts5$CreationDate <- stri_join(stri_sub(posts5$CreationDate,1,10),stri_sub(posts5$CreationDate,12,19),sep = " ")
posts5$CreationDate <- stri_datetime_parse(posts5$CreationDate, format = "yyyy-MM-dd HH:mm:ss")
posts5$CommentDate <- stri_join(stri_sub(posts5$CommentDate,1,10),stri_sub(posts5$CommentDate,12,19),sep = " ")
posts5$CommentDate <- stri_datetime_parse(posts5$CommentDate, format = "yyyy-MM-dd HH:mm:ss")
posts5$AnswerJoinDate <- stri_join(stri_sub(posts5$AnswerJoinDate,1,10),stri_sub(posts5$AnswerJoinDate,12,19),sep = " ")
posts5$AnswerJoinDate <- stri_datetime_parse(posts5$AnswerJoinDate, format = "yyyy-MM-dd HH:mm:ss")
posts5$OwnerJoinDate <- stri_join(stri_sub(posts5$OwnerJoinDate,1,10),stri_sub(posts5$OwnerJoinDate,12,19),sep = " ")
posts5$OwnerJoinDate <- stri_datetime_parse(posts5$OwnerJoinDate, format = "yyyy-MM-dd HH:mm:ss")
posts5$AcceptedTimeDiff <- difftime(posts5$CommentDate,posts5$CreationDate, units = "hours")
# Zapisanie posts 5 do osobnej CSV
write.csv(posts5,"C:/Users/tomas/OneDrive/Documents/Studies/PW-IAD/PADwR/zadania_domowe/03/PADwR---PD3---Data-Science/posts5.csv")
library(dplyr)
library(stringi)
library(ggplot2)
library(shiny)
options(stringsAsFactors=FALSE)
setwd("C:/Users/tomas/OneDrive/Documents/Studies/PW-IAD/PADwR/zadania_domowe/03/PADwR---PD3---Data-Science/apple_shiny_app")
# Załadowanie potrzebnych danych
#posts <- read.csv(file="C:/Users/tomas/Downloads/Apple/apple.stackexchange.com/Posts.csv", header=TRUE, sep=",")
users_countries <- read.csv(file = "C:/Users/tomas/Downloads/Apple/apple.stackexchange.com/Users_countries.csv", header = TRUE, sep =",")
users_stacked_count <- read.csv(file = "users_stacked_join_date.csv", header = TRUE, sep =",")
# Przefiltrowanie interesujacych nas danych
# posts2 <- posts %>% select(Id, CreationDate, PostTypeId, AcceptedAnswerId, OwnerUserId)
# users2 <- users_countries %>% select(Id, Reputation, CreationDate, Country, State)
# rm(posts,users_countries)
# posts3 <- inner_join(posts2,posts2, by = c("AcceptedAnswerId" = "Id")) %>%
#   select(CreationDate = CreationDate.x,
#          OwnerQuestionUserId = OwnerUserId.x,
#          CommentDate = CreationDate.y,
#          OwnerAnswerUserId = OwnerUserId.y
#   )
# posts4 <- inner_join(posts3,users2, by = c("OwnerQuestionUserId" = "Id")) %>%
#   select(CreationDate = CreationDate.x,
#          OwnerQuestionUserId,
#          CommentDate,
#          OwnerAnswerUserId,
#          OwnerReputation = Reputation,
#          OwnerJoinDate = CreationDate.y,
#          OwnerCountry = Country,
#          OwnerState = State)
# posts5 <- inner_join(posts4,users2, by = c("OwnerAnswerUserId" = "Id")) %>%
#   select(CreationDate = CreationDate.x,
#          OwnerQuestionUserId,
#          OwnerReputation,
#          OwnerJoinDate,
#          OwnerCountry,
#          OwnerState,
#          CommentDate,
#          AnswerUserId = OwnerAnswerUserId,
#          AnswerReputation = Reputation,
#          AnswerJoinDate = CreationDate.y,
#          AnswerCountry = Country,
#          AnswerState = State)
#
#
#
# # Operacje potrzebne do wyłuskania daty
# posts5$CreationDate <- stri_join(stri_sub(posts5$CreationDate,1,10),stri_sub(posts5$CreationDate,12,19),sep = " ")
# posts5$CreationDate <- stri_datetime_parse(posts5$CreationDate, format = "yyyy-MM-dd HH:mm:ss")
# posts5$CommentDate <- stri_join(stri_sub(posts5$CommentDate,1,10),stri_sub(posts5$CommentDate,12,19),sep = " ")
# posts5$CommentDate <- stri_datetime_parse(posts5$CommentDate, format = "yyyy-MM-dd HH:mm:ss")
# posts5$AnswerJoinDate <- stri_join(stri_sub(posts5$AnswerJoinDate,1,10),stri_sub(posts5$AnswerJoinDate,12,19),sep = " ")
# posts5$AnswerJoinDate <- stri_datetime_parse(posts5$AnswerJoinDate, format = "yyyy-MM-dd HH:mm:ss")
# posts5$OwnerJoinDate <- stri_join(stri_sub(posts5$OwnerJoinDate,1,10),stri_sub(posts5$OwnerJoinDate,12,19),sep = " ")
# posts5$OwnerJoinDate <- stri_datetime_parse(posts5$OwnerJoinDate, format = "yyyy-MM-dd HH:mm:ss")
#
# posts5$AcceptedTimeDiff <- difftime(posts5$CommentDate,posts5$CreationDate, units = "hours")
# Zapisanie posts 5 do osobnej CSV
#write.csv(posts5,"C:/Users/tomas/OneDrive/Documents/Studies/PW-IAD/PADwR/zadania_domowe/03/PADwR---PD3---Data-Science/posts5.csv")
# Dodanie informacji o całkowitej liczbie użytkowników w danym kraju - ZAPISANE DO PLIKU
# users3 <- users2 %>%
#   group_by(Country,CreationDate = stri_sub(CreationDate,1,7)) %>%
#   summarise(CountTotalUsers = sum(CreationDate == CreationDate)
#   )
# users3$CountTotalUsersStack <- NA
# #Dluga petla - dlatego dane zapisane do CSV
# for(i in 1:nrow(users3)){
#   date_i <- users3$CreationDate[i]
#   country_i <- users3$Country[i]
#   t <- users3 %>% filter(CreationDate <= date_i, Country == country_i)
#   users3$CountTotalUsersStack[i] <- sum(t$CountTotalUsers)
#   rm(t)
# }
# write.csv(users3,"C:/Users/tomas/OneDrive/Documents/Studies/PW-IAD/PADwR/zadania_domowe/03/PADwR---PD3---Data-Science/users_stacked_join_date_month.csv")
users3 <- read.csv("users_stacked_join_date_month.csv", header = TRUE, sep =",")
posts5 <- read.csv("posts5.csv", header = TRUE, sep =",")
runApp()
rsconnect::setAccountInfo(name='kaketo',
token='9DEE81036509ABF9B03F7BD11422C3E3',
secret='X7ti5IgpDbir4vbFsBL8AHUmji0DB7vFcFu8z7Zd')
rsconnect::deployApp()
rsconnect::deployApp()
rsconnect::deployApp()
rsconnect::deployApp()
shiny::runApp()
runApp()
# Opis
Projekt w języku R mający na celu analizę danych z serwisu Stackoverflow.
